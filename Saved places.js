//==================================================================
// Google Collections Automation Script
// Automatiza la adici√≥n de elementos de [SEP] QI Turismo a [AST] QI Turismo
// v1.1 - Fixed: No espera carga en primera iteraci√≥n + Control de parada
//==================================================================

//==================================================================
// VARIABLES DE CONTROL GLOBAL
//==================================================================

// Variable global para controlar la ejecuci√≥n del script
let STOP_AUTOMATION = false;

// Funci√≥n para detener el script
function stopAutomation() {
    STOP_AUTOMATION = true;
    console.log('üõë STOP solicitado. El script se detendr√° despu√©s de la iteraci√≥n actual.');
    console.log('üí° Para reanudar, ejecuta: resumeAutomation()');
}

// Funci√≥n para reanudar el script
function resumeAutomation() {
    STOP_AUTOMATION = false;
    console.log('‚ñ∂Ô∏è Automatizaci√≥n reanudada.');
}

// Funci√≥n para verificar si se debe detener
function shouldStop() {
    return STOP_AUTOMATION;
}

//==================================================================
// FUNCIONES AUXILIARES BASADAS EN EL SCRIPT ORIGINAL
//==================================================================

// Simple delay en milisegundos
async function delay(ms) {
    await new Promise(resolve => setTimeout(resolve, ms));
}

// Espera hasta que el texto indicado aparece en pantalla
async function waitForTextToAppear(text, elementType = 'div', timeout = 10000) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const interval = setInterval(() => {
            // Verificar si se solicit√≥ parar
            if (shouldStop()) {
                clearInterval(interval);
                reject(new Error('Script detenido por el usuario'));
                return;
            }
            
            if (Date.now() - startTime > timeout) {
                clearInterval(interval);
                reject(new Error(`Timeout: El texto "${text}" no apareci√≥ despu√©s de ${timeout}ms`));
                return;
            }
            
            const element = Array.from(document.querySelectorAll(elementType))
                .find(el => el.textContent.trim() === text);
            if (element) {
                clearInterval(interval);
                resolve(element);
                return;
            }
        }, 100);
    });
}

// Espera hasta que aparezca un elemento con el selector dado
async function waitForElement(selector, timeout = 10000) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const interval = setInterval(() => {
            // Verificar si se solicit√≥ parar
            if (shouldStop()) {
                clearInterval(interval);
                reject(new Error('Script detenido por el usuario'));
                return;
            }
            
            if (Date.now() - startTime > timeout) {
                clearInterval(interval);
                reject(new Error(`Timeout: Elemento con selector "${selector}" no encontrado despu√©s de ${timeout}ms`));
                return;
            }
            
            const element = document.querySelector(selector);
            if (element) {
                clearInterval(interval);
                resolve(element);
                return;
            }
        }, 100);
    });
}

// Espera hasta que un elemento sea clickeable
async function waitForClickableElement(selector, timeout = 10000) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const interval = setInterval(() => {
            // Verificar si se solicit√≥ parar
            if (shouldStop()) {
                clearInterval(interval);
                reject(new Error('Script detenido por el usuario'));
                return;
            }
            
            if (Date.now() - startTime > timeout) {
                clearInterval(interval);
                reject(new Error(`Timeout: Elemento clickeable "${selector}" no encontrado despu√©s de ${timeout}ms`));
                return;
            }
            
            const element = document.querySelector(selector);
            if (element && element.offsetParent !== null && !element.disabled) {
                clearInterval(interval);
                resolve(element);
                return;
            }
        }, 100);
    });
}

// Busca texto que contenga una cadena espec√≠fica
async function waitForTextToAppearContains(text, elementType = '*', timeout = 10000) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const interval = setInterval(() => {
            // Verificar si se solicit√≥ parar
            if (shouldStop()) {
                clearInterval(interval);
                reject(new Error('Script detenido por el usuario'));
                return;
            }
            
            if (Date.now() - startTime > timeout) {
                clearInterval(interval);
                reject(new Error(`Timeout: El texto que contiene "${text}" no apareci√≥ despu√©s de ${timeout}ms`));
                return;
            }
            
            const element = Array.from(document.querySelectorAll(elementType))
                .find(el => el.textContent.trim().includes(text));
            if (element) {
                clearInterval(interval);
                resolve(element);
                return;
            }
        }, 100);
    });
}

//==================================================================
// FUNCIONES PRINCIPALES DE AUTOMATIZACI√ìN
//==================================================================

// Espera a que la p√°gina est√© completamente cargada (SOLO SI NO EST√Å LISTA)
async function waitForPageLoadIfNeeded(timeout = 5000) {
    console.log('üîç Verificando si la p√°gina est√° lista...');
    
    // Verificar inmediatamente si ya est√° lista
    if (document.readyState === 'complete' && 
        document.querySelectorAll('div[data-list-item]').length > 0) {
        console.log('‚úÖ La p√°gina ya est√° cargada y lista');
        return;
    }
    
    console.log('‚è≥ Esperando que la p√°gina termine de cargar...');
    
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        
        const checkLoaded = () => {
            // Verificar si se solicit√≥ parar
            if (shouldStop()) {
                reject(new Error('Script detenido por el usuario'));
                return;
            }
            
            if (Date.now() - startTime > timeout) {
                reject(new Error(`Timeout: La p√°gina no termin√≥ de cargar despu√©s de ${timeout}ms`));
                return;
            }
            
            if (document.readyState === 'complete' && 
                document.querySelectorAll('div[data-list-item]').length > 0) {
                console.log('‚úÖ P√°gina cargada completamente');
                resolve();
            } else {
                setTimeout(checkLoaded, 200);
            }
        };
        
        checkLoaded();
    });
}

// Obtiene el primer elemento de la lista
async function getFirstListItem() {
    console.log('üîç Buscando el primer elemento de la lista...');
    
    // Esperar a que haya elementos en la lista
    await waitForElement('div[data-list-item]', 5000);
    
    const firstItem = document.querySelector('div[data-list-item]');
    if (!firstItem) {
        throw new Error('No se encontr√≥ el primer elemento de la lista');
    }
    
    const itemName = firstItem.querySelector('div[role="button"] > div:first-child')?.textContent?.trim();
    console.log(`‚úÖ Primer elemento encontrado: ${itemName || 'Sin nombre'}`);
    
    return firstItem;
}

// Encuentra y hace clic en el bot√≥n de tres puntos del primer elemento
async function clickThreeDotsButton(listItem) {
    console.log('üîç Buscando el bot√≥n de tres puntos...');
    
    // Buscar el bot√≥n de tres puntos dentro del elemento de la lista
    const threeDotsButton = listItem.querySelector('button[aria-label*="M√°s"], button[data-value="menu"], button[aria-haspopup="menu"]');
    
    if (!threeDotsButton) {
        throw new Error('No se encontr√≥ el bot√≥n de tres puntos');
    }
    
    console.log('‚úÖ Bot√≥n de tres puntos encontrado');
    console.log('üñ±Ô∏è Haciendo clic en el bot√≥n de tres puntos...');
    
    threeDotsButton.click();
    await delay(500); // Esperar a que aparezca el men√∫
    
    console.log('‚úÖ Clic realizado en el bot√≥n de tres puntos');
}

// Espera a que aparezca el men√∫ y hace clic en "A√±adir a una colecci√≥n"
async function clickAddToCollection() {
    console.log('‚è≥ Esperando que aparezca el men√∫ emergente...');
    
    // Esperar a que aparezca la opci√≥n "A√±adir a una colecci√≥n"
    const addToCollectionOption = await waitForTextToAppear('A√±adir a una colecci√≥n', '*', 5000);
    
    console.log('‚úÖ Opci√≥n "A√±adir a una colecci√≥n" encontrada');
    console.log('üñ±Ô∏è Haciendo clic en "A√±adir a una colecci√≥n"...');
    
    addToCollectionOption.click();
    await delay(500); // Esperar a que aparezca el popup de colecciones
    
    console.log('‚úÖ Clic realizado en "A√±adir a una colecci√≥n"');
}

// Espera al popup de colecciones y hace clic en "[AST] QI Turismo"
async function selectASTCollection() {
    console.log('‚è≥ Esperando que aparezca el popup de colecciones...');
    
    // Esperar a que aparezca la colecci√≥n "[AST] QI Turismo"
    const astCollection = await waitForTextToAppear('[AST] QI Turismo', '*', 8000);
    
    console.log('‚úÖ Colecci√≥n "[AST] QI Turismo" encontrada');
    console.log('üñ±Ô∏è Haciendo clic en "[AST] QI Turismo"...');
    
    astCollection.click();
    await delay(500); // Esperar a que se procese la acci√≥n
    
    console.log('‚úÖ Clic realizado en "[AST] QI Turismo"');
}

// Espera al toast de confirmaci√≥n y lo registra
async function waitForConfirmationToast() {
    console.log('‚è≥ Esperando el mensaje de confirmaci√≥n...');
    
    try {
        const toast = await waitForTextToAppearContains('A√±adido a [AST] QI Turismo', '*', 10000);
        
        console.log('üéâ ¬°√âXITO! Toast de confirmaci√≥n detectado:');
        console.log(`üì® Mensaje: "${toast.textContent.trim()}"`);
        
        // Esperar un poco para que el toast sea visible
        await delay(2000);
        
        return true;
    } catch (error) {
        console.warn('‚ö†Ô∏è No se detect√≥ el toast de confirmaci√≥n, pero es posible que la operaci√≥n haya sido exitosa');
        return false;
    }
}

//==================================================================
// FUNCI√ìN PRINCIPAL DE PROCESAMIENTO
//==================================================================

// Procesa un elemento individual
async function processOneItem(iteration, isFirstIteration = false) {
    console.log(`\nüîÑ ======== ITERACI√ìN ${iteration} ========`);
    
    // Verificar si se solicit√≥ parar
    if (shouldStop()) {
        console.log('üõë Script detenido por el usuario');
        throw new Error('Script detenido por el usuario');
    }
    
    try {
        // Paso 1: Esperar a que la p√°gina est√© lista (solo si no es la primera iteraci√≥n)
        if (isFirstIteration) {
            console.log('‚ÑπÔ∏è Primera iteraci√≥n - omitiendo espera de carga de p√°gina');
            await waitForPageLoadIfNeeded(2000); // Timeout corto solo para verificar
        } else {
            await waitForPageLoadIfNeeded();
        }
        await delay(1000);
        
        // Verificar si se solicit√≥ parar antes de continuar
        if (shouldStop()) {
            throw new Error('Script detenido por el usuario');
        }
        
        // Paso 2: Obtener el primer elemento de la lista
        const firstItem = await getFirstListItem();
        await delay(500);
        
        // Paso 3: Hacer clic en los tres puntos
        await clickThreeDotsButton(firstItem);
        await delay(1000);
        
        // Paso 4: Hacer clic en "A√±adir a una colecci√≥n"
        await clickAddToCollection();
        await delay(1500);
        
        // Paso 5: Seleccionar "[AST] QI Turismo"
        await selectASTCollection();
        await delay(2000);
        
        // Paso 6: Esperar confirmaci√≥n
        await waitForConfirmationToast();
        
        console.log(`‚úÖ ======== ITERACI√ìN ${iteration} COMPLETADA ========\n`);
        
        // Esperar antes de la siguiente iteraci√≥n para que la lista se actualice
        await delay(3000);
        
        return true;
        
    } catch (error) {
        if (error.message.includes('Script detenido por el usuario')) {
            throw error; // Propagar el error de parada
        }
        
        console.error(`‚ùå Error en la iteraci√≥n ${iteration}:`, error.message);
        console.log(`‚ö†Ô∏è Continuando con la siguiente iteraci√≥n despu√©s de una pausa...`);
        
        // Esperar un poco m√°s si hay error
        await delay(5000);
        
        return false;
    }
}

//==================================================================
// FUNCI√ìN PRINCIPAL DEL SCRIPT
//==================================================================

// Funci√≥n principal que ejecuta el bucle completo
async function automateGoogleCollections() {
    console.log('üöÄ ======== INICIANDO AUTOMATIZACI√ìN ========');
    console.log('üìã Procesando 5 elementos de [SEP] QI Turismo hacia [AST] QI Turismo');
    console.log('üí° Para detener el script en cualquier momento, ejecuta: stopAutomation()\n');
    
    // Resetear la variable de parada al inicio
    STOP_AUTOMATION = false;
    
    const totalIterations = 5;
    let successfulIterations = 0;
    let failedIterations = 0;
    
    try {
        for (let i = 1; i <= totalIterations; i++) {
            // Verificar si se solicit√≥ parar
            if (shouldStop()) {
                console.log('üõë Automatizaci√≥n detenida por el usuario');
                break;
            }
            
            const isFirstIteration = (i === 1);
            const success = await processOneItem(i, isFirstIteration);
            
            if (success) {
                successfulIterations++;
            } else {
                failedIterations++;
            }
            
            // Peque√±a pausa entre iteraciones
            if (i < totalIterations && !shouldStop()) {
                console.log(`‚è∏Ô∏è Pausa entre iteraciones... (${i}/${totalIterations})`);
                await delay(2000);
            }
        }
    } catch (error) {
        if (error.message.includes('Script detenido por el usuario')) {
            console.log('üõë Script detenido por solicitud del usuario');
        } else {
            console.error('‚ùå Error cr√≠tico en la automatizaci√≥n:', error.message);
        }
    }
    
    console.log('\nüèÅ ======== AUTOMATIZACI√ìN COMPLETADA ========');
    console.log(`üìä Resumen:`);
    console.log(`   ‚úÖ Exitosas: ${successfulIterations}/${totalIterations}`);
    console.log(`   ‚ùå Fallidas: ${failedIterations}/${totalIterations}`);
    
    if (totalIterations > 0) {
        console.log(`   üìà Tasa de √©xito: ${Math.round((successfulIterations/totalIterations) * 100)}%`);
    }
    
    if (successfulIterations === totalIterations) {
        console.log('üéâ ¬°Todas las operaciones completadas exitosamente!');
    } else if (shouldStop()) {
        console.log('‚è∏Ô∏è Automatizaci√≥n detenida antes de completar todas las iteraciones');
    } else {
        console.log('‚ö†Ô∏è Algunas operaciones fallaron. Revisa los logs anteriores.');
    }
    
    // Resetear variable de parada al final
    STOP_AUTOMATION = false;
}

//==================================================================
// FUNCIONES DE UTILIDAD PARA DEPURACI√ìN
//==================================================================

// Funci√≥n para inspeccionar la estructura actual de la p√°gina
function debugPageStructure() {
    console.log('üîç ======== DEPURACI√ìN DE ESTRUCTURA ========');
    
    const listItems = document.querySelectorAll('div[data-list-item]');
    console.log(`üìù Elementos de lista encontrados: ${listItems.length}`);
    
    if (listItems.length > 0) {
        const firstItem = listItems[0];
        console.log('üîç Primer elemento:', firstItem);
        
        const threeDotsButtons = firstItem.querySelectorAll('button');
        console.log(`üîò Botones encontrados en el primer elemento: ${threeDotsButtons.length}`);
        
        threeDotsButtons.forEach((btn, index) => {
            console.log(`   Bot√≥n ${index + 1}:`, {
                ariaLabel: btn.getAttribute('aria-label'),
                dataValue: btn.getAttribute('data-value'),
                ariaHaspopup: btn.getAttribute('aria-haspopup'),
                textContent: btn.textContent.trim()
            });
        });
    }
    
    console.log('üèÅ ======== FIN DEPURACI√ìN ========');
}

// Funci√≥n de test para verificar selectores
async function testSelectors() {
    console.log('üß™ ======== PRUEBA DE SELECTORES ========');
    
    try {
        console.log('1Ô∏è‚É£ Probando carga de p√°gina...');
        await waitForPageLoadIfNeeded();
        console.log('‚úÖ P√°gina verificada');
        
        console.log('2Ô∏è‚É£ Probando obtenci√≥n del primer elemento...');
        const firstItem = await getFirstListItem();
        console.log('‚úÖ Primer elemento obtenido');
        
        console.log('3Ô∏è‚É£ Probando localizaci√≥n del bot√≥n de tres puntos...');
        const threeDotsButton = firstItem.querySelector('button[aria-label*="M√°s"], button[data-value="menu"], button[aria-haspopup="menu"]');
        if (threeDotsButton) {
            console.log('‚úÖ Bot√≥n de tres puntos encontrado');
        } else {
            console.log('‚ùå Bot√≥n de tres puntos NO encontrado');
            debugPageStructure();
        }
        
        console.log('üèÅ Prueba de selectores completada');
        
    } catch (error) {
        console.error('‚ùå Error en la prueba de selectores:', error.message);
    }
}

//==================================================================
// INSTRUCCIONES DE USO Y CONTROL
//==================================================================

console.log(`
üöÄ SCRIPT DE AUTOMATIZACI√ìN DE GOOGLE COLLECTIONS v1.1
======================================================

INSTRUCCIONES DE USO:

1. Navega a: https://www.google.com/interests/saved/list/g0aA0LC8-ib4cIPcj3amUorBIS3sKA
2. Aseg√∫rate de estar logueado en tu cuenta de Google
3. Espera a que la p√°gina cargue completamente
4. Ejecuta en la consola: automateGoogleCollections()

FUNCIONES DISPONIBLES:
- automateGoogleCollections()     ‚Üí Ejecuta el proceso completo
- stopAutomation()               ‚Üí ‚õî DETIENE el script inmediatamente
- resumeAutomation()             ‚Üí ‚ñ∂Ô∏è Reanuda si fue detenido
- testSelectors()                ‚Üí Prueba los selectores
- debugPageStructure()           ‚Üí Inspecciona la estructura
- processOneItem(n)              ‚Üí Procesa un solo elemento

CONTROL DE EJECUCI√ìN:
üõë Para PARAR el script: stopAutomation()
‚ñ∂Ô∏è Para REANUDAR: resumeAutomation()

MEJORAS v1.1:
‚úÖ No espera carga innecesaria en primera iteraci√≥n
‚úÖ Control completo de parada/reanudaci√≥n
‚úÖ Verificaciones de parada en todos los bucles

¬°Listo para usar! üéØ
`);